 stages:
   - test
   - build
   - deploy
   - release

variables:
  DOCS_VERSION_FILE: "docs/index.md"
  CODE_VERSION_FILE: "cmd/server/server.go"

# unit_test:
#   image: golang
#   stage: test
#   script:
#     - go install gotest.tools/gotestsum@latest
#     - gotestsum --junitfile unit.xml --format testname -- -run TestUnitTestSuite ./...
#   artifacts:
#     when: always
#     reports:
#       junit: unit.xml
#     paths:
#       - "*.out"
#   rules:
#     - when: always

# integration_test:
#   image: golang
#   stage: test
#   services:
#     - postgres:alpine
#   variables:
#     POSTGRES_DB: users
#     POSTGRES_USER: admin
#     POSTGRES_PASSWORD: secret
#     POSTGRES_HOSTNAME: postgres
#     POSTGRES_PORT: 5432
#     POSTGRES_SCHEMA: public
#     POSTGRES_HOST_AUTH_METHOD: trust
#     MIGRATION_PATH: $CI_PROJECT_DIR/internal/migrations/sql
#   script:
#     - go install gotest.tools/gotestsum@latest
#     - gotestsum --junitfile integration.xml --format testname -- -run TestIntegrationTestSuite ./...
#   artifacts:
#     when: always
#     reports:
#       junit: integration.xml
#     paths:
#       - "*.out"
#   rules:
#     - when: always

# docker:main:
#   stage: build
#   image:
#     name: gcr.io/kaniko-project/executor:debug
#     entrypoint: [ "" ]
#   variables:
#     IMAGE_TAG: "${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:${CI_COMMIT_REF_NAME}"
#     IMAGE_TAG_LATEST: "${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:latest"
#   script:
#     - echo $CI_COMMIT_REF_NAME
#     - echo "{\"auths\":{\"${HARBOR_HOST}\":{\"auth\":\"$(echo -n 'robot$'${HARBOR_USERNAME}:${HARBOR_PASSWORD} | base64)\"}}}" > /kaniko/.docker/config.json
#     - |
#       if [ -n "$CI_COMMIT_TAG" ]; then
#         export WATERMARK="$CI_COMMIT_TAG"
#       else
#         export WATERMARK="$CI_COMMIT_BRANCH":"$CI_COMMIT_SHA"
#       fi
#     - sed -i "s/\[VERSION\]/$WATERMARK/g" ${CI_PROJECT_DIR}/${CODE_VERSION_FILE}
#     - /kaniko/executor
#       --context "${CI_PROJECT_DIR}"
#       --cache
#       --dockerfile "${CI_PROJECT_DIR}/build/Dockerfile"
#       --destination "${IMAGE_TAG}"
#       --destination "${IMAGE_TAG_LATEST}"
#   rules:
#     - if: $CI_COMMIT_BRANCH =~  /^v[0-9]+\.[0-9]+$/ && $CI_PIPELINE_SOURCE != "merge_request_event"
#     - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE != "merge_request_event"
#     - if: $CI_COMMIT_TAG

# docker:docs:
#   stage: docker
#   image:
#     name: gcr.io/kaniko-project/executor:debug
#     entrypoint: [ "" ]
#   script:
#     - echo $CI_COMMIT_REF_NAME
#     - echo "{\"auths\":{\"${HARBOR_HOST}\":{\"auth\":\"$(echo -n 'robot$'${HARBOR_USERNAME}:${HARBOR_PASSWORD} | base64)\"}}}" > /kaniko/.docker/config.json
#     - |
#       if [ -n "$CI_COMMIT_TAG" ]; then
#         export WATERMARK="$CI_COMMIT_TAG"
#       else
#         export WATERMARK="$CI_COMMIT_BRANCH":"$CI_COMMIT_SHA"
#       fi
#     - sed -i "s/\[VERSION\]/$WATERMARK/g" ${CI_PROJECT_DIR}/${DOCS_VERSION_FILE}
#     - /kaniko/executor
#       --context "${CI_PROJECT_DIR}"
#       --cache
#       --dockerfile "${CI_PROJECT_DIR}/build/docs.Dockerfile"
#       --destination "${IMAGE_TAG}"
#   rules:
#     - if: $CI_COMMIT_BRANCH =~  /^v[0-9]+\.[0-9]+$/ && $CI_PIPELINE_SOURCE != "merge_request_event"
#     - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE != "merge_request_event"
#     - if: $CI_COMMIT_TAG

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo "Releasing ${CI_COMMIT_TAG} ..."
    - release-cli create --name "Release $CI_COMMIT_TAG" --tag-name "$CI_COMMIT_TAG"
  rules:
    - if: $CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/

# deploy-job:      # This is a placeholder, will be replaced with K8 deploy
#   stage: deploy
#   environment: production
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."
#   rules:
#     - if: $CI_COMMIT_BRANCH == 'main'
#     - if: $CI_COMMIT_BRANCH =~ /^v[0-9]+\.[0-9]+$/