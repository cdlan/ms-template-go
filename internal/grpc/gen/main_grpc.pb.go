// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: main.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoverageServiceClient is the client API for CoverageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoverageServiceClient interface {
	GetCoverage(ctx context.Context, in *GetCoverageRequest, opts ...grpc.CallOption) (CoverageService_GetCoverageClient, error)
	GetCoverageKit(ctx context.Context, in *GetCoverageKitRequest, opts ...grpc.CallOption) (CoverageService_GetCoverageKitClient, error)
	QuerySpecificCoverage(ctx context.Context, in *QuerySpecificCoverageRequest, opts ...grpc.CallOption) (CoverageService_QuerySpecificCoverageClient, error)
	GetStates(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (CoverageService_GetStatesClient, error)
	GetCarrierList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (CoverageService_GetCarrierListClient, error)
}

type coverageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoverageServiceClient(cc grpc.ClientConnInterface) CoverageServiceClient {
	return &coverageServiceClient{cc}
}

func (c *coverageServiceClient) GetCoverage(ctx context.Context, in *GetCoverageRequest, opts ...grpc.CallOption) (CoverageService_GetCoverageClient, error) {
	stream, err := c.cc.NewStream(ctx, &CoverageService_ServiceDesc.Streams[0], "/main.CoverageService/GetCoverage", opts...)
	if err != nil {
		return nil, err
	}
	x := &coverageServiceGetCoverageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CoverageService_GetCoverageClient interface {
	Recv() (*GetCoverageResponse, error)
	grpc.ClientStream
}

type coverageServiceGetCoverageClient struct {
	grpc.ClientStream
}

func (x *coverageServiceGetCoverageClient) Recv() (*GetCoverageResponse, error) {
	m := new(GetCoverageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverageServiceClient) GetCoverageKit(ctx context.Context, in *GetCoverageKitRequest, opts ...grpc.CallOption) (CoverageService_GetCoverageKitClient, error) {
	stream, err := c.cc.NewStream(ctx, &CoverageService_ServiceDesc.Streams[1], "/main.CoverageService/GetCoverageKit", opts...)
	if err != nil {
		return nil, err
	}
	x := &coverageServiceGetCoverageKitClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CoverageService_GetCoverageKitClient interface {
	Recv() (*GetCoverageKitResponse, error)
	grpc.ClientStream
}

type coverageServiceGetCoverageKitClient struct {
	grpc.ClientStream
}

func (x *coverageServiceGetCoverageKitClient) Recv() (*GetCoverageKitResponse, error) {
	m := new(GetCoverageKitResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverageServiceClient) QuerySpecificCoverage(ctx context.Context, in *QuerySpecificCoverageRequest, opts ...grpc.CallOption) (CoverageService_QuerySpecificCoverageClient, error) {
	stream, err := c.cc.NewStream(ctx, &CoverageService_ServiceDesc.Streams[2], "/main.CoverageService/QuerySpecificCoverage", opts...)
	if err != nil {
		return nil, err
	}
	x := &coverageServiceQuerySpecificCoverageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CoverageService_QuerySpecificCoverageClient interface {
	Recv() (*QuerySpecificCoverageResponse, error)
	grpc.ClientStream
}

type coverageServiceQuerySpecificCoverageClient struct {
	grpc.ClientStream
}

func (x *coverageServiceQuerySpecificCoverageClient) Recv() (*QuerySpecificCoverageResponse, error) {
	m := new(QuerySpecificCoverageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverageServiceClient) GetStates(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (CoverageService_GetStatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &CoverageService_ServiceDesc.Streams[3], "/main.CoverageService/GetStates", opts...)
	if err != nil {
		return nil, err
	}
	x := &coverageServiceGetStatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CoverageService_GetStatesClient interface {
	Recv() (*GetStatesResponse, error)
	grpc.ClientStream
}

type coverageServiceGetStatesClient struct {
	grpc.ClientStream
}

func (x *coverageServiceGetStatesClient) Recv() (*GetStatesResponse, error) {
	m := new(GetStatesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverageServiceClient) GetCarrierList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (CoverageService_GetCarrierListClient, error) {
	stream, err := c.cc.NewStream(ctx, &CoverageService_ServiceDesc.Streams[4], "/main.CoverageService/GetCarrierList", opts...)
	if err != nil {
		return nil, err
	}
	x := &coverageServiceGetCarrierListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CoverageService_GetCarrierListClient interface {
	Recv() (*GetCarrierListResponse, error)
	grpc.ClientStream
}

type coverageServiceGetCarrierListClient struct {
	grpc.ClientStream
}

func (x *coverageServiceGetCarrierListClient) Recv() (*GetCarrierListResponse, error) {
	m := new(GetCarrierListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CoverageServiceServer is the server API for CoverageService service.
// All implementations must embed UnimplementedCoverageServiceServer
// for forward compatibility
type CoverageServiceServer interface {
	GetCoverage(*GetCoverageRequest, CoverageService_GetCoverageServer) error
	GetCoverageKit(*GetCoverageKitRequest, CoverageService_GetCoverageKitServer) error
	QuerySpecificCoverage(*QuerySpecificCoverageRequest, CoverageService_QuerySpecificCoverageServer) error
	GetStates(*emptypb.Empty, CoverageService_GetStatesServer) error
	GetCarrierList(*emptypb.Empty, CoverageService_GetCarrierListServer) error
	mustEmbedUnimplementedCoverageServiceServer()
}

// UnimplementedCoverageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCoverageServiceServer struct {
}

func (UnimplementedCoverageServiceServer) GetCoverage(*GetCoverageRequest, CoverageService_GetCoverageServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCoverage not implemented")
}
func (UnimplementedCoverageServiceServer) GetCoverageKit(*GetCoverageKitRequest, CoverageService_GetCoverageKitServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCoverageKit not implemented")
}
func (UnimplementedCoverageServiceServer) QuerySpecificCoverage(*QuerySpecificCoverageRequest, CoverageService_QuerySpecificCoverageServer) error {
	return status.Errorf(codes.Unimplemented, "method QuerySpecificCoverage not implemented")
}
func (UnimplementedCoverageServiceServer) GetStates(*emptypb.Empty, CoverageService_GetStatesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStates not implemented")
}
func (UnimplementedCoverageServiceServer) GetCarrierList(*emptypb.Empty, CoverageService_GetCarrierListServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCarrierList not implemented")
}
func (UnimplementedCoverageServiceServer) mustEmbedUnimplementedCoverageServiceServer() {}

// UnsafeCoverageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoverageServiceServer will
// result in compilation errors.
type UnsafeCoverageServiceServer interface {
	mustEmbedUnimplementedCoverageServiceServer()
}

func RegisterCoverageServiceServer(s grpc.ServiceRegistrar, srv CoverageServiceServer) {
	s.RegisterService(&CoverageService_ServiceDesc, srv)
}

func _CoverageService_GetCoverage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCoverageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverageServiceServer).GetCoverage(m, &coverageServiceGetCoverageServer{stream})
}

type CoverageService_GetCoverageServer interface {
	Send(*GetCoverageResponse) error
	grpc.ServerStream
}

type coverageServiceGetCoverageServer struct {
	grpc.ServerStream
}

func (x *coverageServiceGetCoverageServer) Send(m *GetCoverageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CoverageService_GetCoverageKit_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCoverageKitRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverageServiceServer).GetCoverageKit(m, &coverageServiceGetCoverageKitServer{stream})
}

type CoverageService_GetCoverageKitServer interface {
	Send(*GetCoverageKitResponse) error
	grpc.ServerStream
}

type coverageServiceGetCoverageKitServer struct {
	grpc.ServerStream
}

func (x *coverageServiceGetCoverageKitServer) Send(m *GetCoverageKitResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CoverageService_QuerySpecificCoverage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QuerySpecificCoverageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverageServiceServer).QuerySpecificCoverage(m, &coverageServiceQuerySpecificCoverageServer{stream})
}

type CoverageService_QuerySpecificCoverageServer interface {
	Send(*QuerySpecificCoverageResponse) error
	grpc.ServerStream
}

type coverageServiceQuerySpecificCoverageServer struct {
	grpc.ServerStream
}

func (x *coverageServiceQuerySpecificCoverageServer) Send(m *QuerySpecificCoverageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CoverageService_GetStates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverageServiceServer).GetStates(m, &coverageServiceGetStatesServer{stream})
}

type CoverageService_GetStatesServer interface {
	Send(*GetStatesResponse) error
	grpc.ServerStream
}

type coverageServiceGetStatesServer struct {
	grpc.ServerStream
}

func (x *coverageServiceGetStatesServer) Send(m *GetStatesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CoverageService_GetCarrierList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverageServiceServer).GetCarrierList(m, &coverageServiceGetCarrierListServer{stream})
}

type CoverageService_GetCarrierListServer interface {
	Send(*GetCarrierListResponse) error
	grpc.ServerStream
}

type coverageServiceGetCarrierListServer struct {
	grpc.ServerStream
}

func (x *coverageServiceGetCarrierListServer) Send(m *GetCarrierListResponse) error {
	return x.ServerStream.SendMsg(m)
}

// CoverageService_ServiceDesc is the grpc.ServiceDesc for CoverageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoverageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.CoverageService",
	HandlerType: (*CoverageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCoverage",
			Handler:       _CoverageService_GetCoverage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetCoverageKit",
			Handler:       _CoverageService_GetCoverageKit_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "QuerySpecificCoverage",
			Handler:       _CoverageService_QuerySpecificCoverage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetStates",
			Handler:       _CoverageService_GetStates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetCarrierList",
			Handler:       _CoverageService_GetCarrierList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "main.proto",
}
